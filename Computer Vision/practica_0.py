# -*- coding: utf-8 -*-
"""Practica 0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oix73HvlNWUBdnLqt7X6U2LSSgyVEB4a
"""

"""
Created on Mon Sep  6 20:19:38 2021
@author: P3rpleX
"""
#!/usr/bin/env python
from PIL import Image, TiffImagePlugin, ImageOps
#4.1.1 matploit 
import numpy as np
import os
TiffImagePlugin.DEBUG = True
import matplotlib.image as mpimg 
import matplotlib.pyplot as plt
#import cv2

#Las siguientes imagenes no las pude desplegar con PIL 
#house.tif,lake.tif,peppers_color.tif.

def show_image(image_file_name):
    cwd = os.getcwd()
    os.chdir(cwd)
    os.chdir('./imagenes')
    os.chdir(cwd)
    image=Image.open(image_file_name)
    print("Tipo de imagen: ",image.format)
    print("Tipo de dato: ",type(image))
    print("Tamaño: ",image.size)
    image.show()
    
##############4.2##############

img_name = r'C:\\Users\\carlo\\Desktop\\VIsion Computacional\\imagenes\\cameraman.tif'
im = mpimg.imread(img_name)
#plt.imshow(im, cmap="gray")

image = Image.open(img_name)
img_resized = image.resize((256,256)) #Imagen a la mitad de tamaño
#img_resized.show()
new_image = im.copy()
#Funcion para promediar por 4 pixeles para esto use matploit, no pude hacer operaciones con PIL
def mean4pixels(image): 
    average_sum = 0
    n=0
    for i in range(0, len(im)):
        for j in range(0, len(im[i])):
            for k in range(0, 3):
                for l in range(0, 3):
                    if (len(im) > (i + k) >= 0) and (len(im[i]) > (j + l) >= 0):
                        average_sum += im[i+k][j+l]
                        n += 1
    
            new_image[i][j] = (int(round(average_sum/n)))
            average_sum = 0
            n = 0
    
    x = Image.fromarray(np.array(new_image), 'L') #L para dejarla en escala de grises
    print("done")
    x.show()
    image.show()
    
##############4.3.1##############
path = "C:\\Users\\carlo\\Desktop\\VIsion Computacional\\imagenes2\\abdomen.png"

def resizeX5():
    if os.path.isfile(path):
        im = Image.open(path)
        f, e = os.path.splitext(path)
        imResize = im.resize((im.height*5,im.width*5), Image.ANTIALIAS)
        imResize.save(f + ' resized.jpg', 'JPEG', quality=90)
##############4.3.2##############
def resize_3():
    if os.path.isfile(path):
        im = Image.open(path)
        f, e = os.path.splitext(path)
        imResize = im.resize((int(im.height/3),int(im.width/3)), Image.ANTIALIAS)
        imResize.save(f + ' resized.jpg', 'JPEG', quality=90)

##############4.3.3##############
    
def rotate():
    image= Image.open(path)
    rotated_45 = image.rotate(45)
    transposed = image.rotate(90)
    rotated_180 = image.rotate(180)
    rotated_45.show()
    transposed.show()
    rotated_45.save("Imagen_rotada45°.png")
    transposed.save("Imagen_rotada90°.png")
    rotated_180.save("Imagen_rotada180°.png")
##############4.4##############
def ej4_4():
    peppers_filename = "C:\\Users\\carlo\\Desktop\\VIsion Computacional\\imagenes\\peppers_color.png"
    peppers = Image.open(peppers_filename)
    peppersGray = peppers.convert('L')
    area = (210,510,180,420)
    cropped = ImageOps.crop(image, area)
    peppersGray.show()
    cropped.show()

##############4.5##############
def ej4_5():
    ##Use numpy y matplotlib por que no pude desplegar el formato raw con PIL
    raw_filename = "C:\\Users\\carlo\\Desktop\\VIsion Computacional\\imagenes\\rosa800x600.raw"
    size = (800,600)
    #image.data[:] = open(raw_filename, encoding="cp1252").read()
    #print(image.dtype)
    image_final = np.fromfile(raw_filename, dtype=np.uint8)
    image_final = image_final.reshape(size)
    plt.imshow(image_final, cmap='gray')

#show_image('./imagenes2/magriclonRGB.jpg')
#mean4pixels(image)
#resizeX5()
#resize_3()
#rotate()
#ej4_4()
#ej4_5()